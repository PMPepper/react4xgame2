{"version":3,"file":"static/js/24.0d6b0912.chunk.js","mappings":"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","sources":["helpers/object/map.js","helpers/object/forEach.js","helpers/physics/orbit-period.js","helpers/physics/consts.js","game/data/defaultGameDefinition.js","game/server/createWorldFromDefinition.js","game/server/entityProcessorFactories/movement.js","game/server/entityProcessorFactories/colony/calculatePopulationWorkers.js","game/server/entityProcessorFactories/colony/calculatePopulationGrowth.js","game/Consts.js","game/server/entityProcessorFactories/colony/calculatePopulationProductionCapabilites.js","game/server/entityProcessorFactories/colony/calculateLabourEfficiency.js","game/server/entityProcessorFactories/colony.js","game/server/entityProcessorFactories/colony/calculateTechnologyModifiers.js","game/server/Server.js","helpers/object/isEmpty.js","game/FactionClientTypes.js","game/server/WorkerServer.js","game/server/worker.js","../webpack/bootstrap","../webpack/runtime/chunk loaded","../webpack/runtime/define property getters","../webpack/runtime/ensure chunk","../webpack/runtime/get javascript chunk filename","../webpack/runtime/get mini-css chunk filename","../webpack/runtime/global","../webpack/runtime/hasOwnProperty shorthand","../webpack/runtime/node module decorator","../webpack/runtime/publicPath","../webpack/runtime/importScripts chunk loading","../webpack/runtime/startup chunk dependencies","../webpack/startup"],"sourcesContent":["export default function mapObject(obj, mapFunc) {\r\n  const output = {};\r\n\r\n  for(let i = 0, k = Object.keys(obj), l = k.length; i < l; ++i) {\r\n    const key = k[i];\r\n    const value = obj[key];\r\n\r\n    output[key] = mapFunc(value, key, obj);\r\n  }\r\n\r\n  return output;\r\n}\r\n","export default function forEachObject(obj, forEachFunc) {\r\n  for(let i = 0, k = Object.keys(obj), l = k.length; i < l; ++i) {\r\n    const key = k[i];\r\n    const value = obj[key];\r\n\r\n    forEachFunc(value, key, obj);\r\n  }\r\n\r\n  return obj;\r\n}\r\n","import {GRAVITATIONAL_CONSTANT} from './consts';\r\n\r\nexport default function orbitPeriod(orbitRadius, orbitingBodyMass, orbitedBodyMass) {\r\n  if(isNaN(orbitRadius) || orbitRadius < 0 || isNaN(orbitingBodyMass) || orbitingBodyMass < 0 || isNaN(orbitedBodyMass) || orbitedBodyMass < 0) {\r\n    throw new Error('Invalid orbitPeriod values');\r\n  }\r\n\r\n  const a = orbitRadius * orbitRadius * orbitRadius;\r\n  const b = GRAVITATIONAL_CONSTANT * (orbitingBodyMass + orbitedBodyMass);\r\n\r\n  return 2 * Math.PI * Math.sqrt(a/b);\r\n}\r\n","//Physical constants\r\nexport const GRAVITATIONAL_CONSTANT = 6.67408e-11;\r\nexport const STEFAN_BOLTZMANN = 5.670373e-8;\r\n\r\nexport const G = 9.819649737724955;//Earth's surface gravity based on internal calculations (9.819649737724955)\r\nexport const C = 299792458;//speed of light (m/s)\r\n","//includes stuff that usually won't change between games (minerals, tech tree, structure build times, costs, minerals, etc)\r\n\r\nconst config = {\r\n  //TODO define equations here\r\n  equations: {\r\n    \r\n  },\r\n\r\n  baseSpecies: {\r\n    growthRate: 1.05,\r\n    production: 1,\r\n    research: 1,\r\n    mining: 1,\r\n    support: 0.2,//base fraction of how many individuals are needed for support jobs in a colony (e.g. agriculture, bureaucracy etc)\r\n    workerMultiplier: 1,//how many individuals are needed to operate something, e.g. if a factory needs a base of 1000 workers, and this value is 2, then you'll need 500 workers to operate the factory\r\n    crewMultiplier: 1,//As above, but for crewing ships\r\n  },\r\n  minerals: {\r\n    \"1\": \"Thatcherite\",//coru\r\n    \"2\": \"Blairite\",//vend\r\n    \"3\": \"Brownite\",//trit\r\n    \"4\": \"Corbynite\",//dura\r\n    \"5\": \"Adamantium\",//neu\r\n    \"6\": \"Mayite\",//corbo\r\n    \"7\": \"Chobium\",//galli\r\n    \"8\": \"Sloughium\",//boro\r\n    \"9\": \"Muskite\",//merc\r\n    \"10\": \"Majorium\",\r\n    \"11\": \"Cameronium\",//uri\r\n    \"12\": \"Stellarium\",//sori\r\n  },\r\n  startingWorldMinerals: {\r\n    \"1\": {quantity: [400000, 500000], access: [0.7, 1]},\r\n    \"2\": {quantity: [50000, 100000], access: [0.5, 1]},\r\n    \"3\": {quantity: [50000, 100000], access: [0.5, 1]},\r\n    \"4\": {quantity: [50000, 100000], access: [0.5, 1]},\r\n    \"5\": {quantity: [50000, 100000], access: [0.8, 1]},\r\n    \"6\": {quantity: [50000, 100000], access: [0.5, 1]},\r\n    \"7\": {quantity: [50000, 100000], access: [0.5, 1]},\r\n    \"8\": {quantity: [50000, 100000], access: [0.5, 1]},\r\n    \"9\": {quantity: [50000, 100000], access: [0.5, 1]},\r\n    \"10\": {quantity: [50000, 100000], access: [0.5, 1]},\r\n    \"11\": {quantity: [50000, 100000], access: [0.5, 1]},\r\n    \"12\": {quantity: [200000, 250000], access: [0.5, 1]},\r\n  },\r\n  systemBodyTypeMineralAbundance: {\r\n    \"planet\": {\r\n      \"1\": 1,//coru\r\n      \"2\": 1,//vend\r\n      \"3\": 1,//trit\r\n      \"4\": 1,//dura\r\n      \"5\": 1,//neu\r\n      \"6\": 1,//corbo\r\n      \"7\": 1,//galli\r\n      \"8\": 1,//boro\r\n      \"9\": 1,//merc\r\n      \"10\": 1,\r\n      \"11\": 1,//uri\r\n      \"12\": 1,//sori\r\n    },\r\n    \"moon\": {\r\n      \"1\": 1,//coru\r\n      \"2\": 1,//vend\r\n      \"3\": 1,//trit\r\n      \"4\": 1,//dura\r\n      \"5\": 1,//neu\r\n      \"6\": 1,//corbo\r\n      \"7\": 1,//galli\r\n      \"8\": 1,//boro\r\n      \"9\": 1,//merc\r\n      \"10\": 1,\r\n      \"11\": 1,//uri\r\n      \"12\": 1,//sori\r\n    },\r\n    \"dwarfPlanet\": {\r\n      \"1\": 1,//coru\r\n      \"2\": 1,//vend\r\n      \"3\": 1,//trit\r\n      \"4\": 1,//dura\r\n      \"5\": 1,//neu\r\n      \"6\": 1,//corbo\r\n      \"7\": 1,//galli\r\n      \"8\": 1,//boro\r\n      \"9\": 1,//merc\r\n      \"10\": 1,\r\n      \"11\": 1,//uri\r\n      \"12\": 1,//sori\r\n    },\r\n    \"asteroid\": {\r\n      \"1\": 1,//coru\r\n      \"2\": 1,//vend\r\n      \"3\": 1,//trit\r\n      \"4\": 1,//dura\r\n      \"5\": 1,//neu\r\n      \"6\": 1,//corbo\r\n      \"7\": 1,//galli\r\n      \"8\": 1,//boro\r\n      \"9\": 1,//merc\r\n      \"10\": 1,\r\n      \"11\": 1,//uri\r\n      \"12\": 0.2,//sori\r\n    },\r\n    \"gasGiant\": {\r\n      \"1\": 0,//coru\r\n      \"2\": 0,//vend\r\n      \"3\": 0,//trit\r\n      \"4\": 0,//dura\r\n      \"5\": 0,//neu\r\n      \"6\": 0,//corbo\r\n      \"7\": 0,//galli\r\n      \"8\": 0,//boro\r\n      \"9\": 0,//merc\r\n      \"10\": 0,\r\n      \"11\": 0,//uri\r\n      \"12\": 1,//sori\r\n    },\r\n  },\r\n  structures: {\r\n    \"1\": {\r\n      name: 'Conventional industry',\r\n      mass: 25e6,\r\n      workers: 50000,\r\n      bp: 100,\r\n      minerals: {},\r\n      capabilities: {\r\n        construction: 1\r\n      },\r\n      upgrade: [3],\r\n      requireTechnologyIds: [],\r\n    },\r\n    \"2\": {\r\n      name: 'Conventional mine',\r\n      mass: 25e6,\r\n      workers: 50000,\r\n      bp: 100,\r\n      minerals: {},\r\n      capabilities: {\r\n        mining: 1\r\n      },\r\n      upgrade: [4],\r\n      requireTechnologyIds: [],\r\n    },\r\n    \"3\": {\r\n      name: 'PE Industry',\r\n      mass: 25e6,\r\n      workers: 50000,\r\n      bp: 120,\r\n      minerals: {\r\n        \"4\": 60,\r\n        \"3\": 30,\r\n        \"2\": 30,\r\n      },\r\n      capabilities: {\r\n        construction: 10\r\n      },\r\n      requireTechnologyIds: ['pe'],\r\n    },\r\n    \"4\": {\r\n      name: 'PE mine',\r\n      mass: 25e6,\r\n      workers: 50000,\r\n      bp: 120,\r\n      minerals: {\r\n        \"4\": 60,\r\n        \"1\": 30,\r\n      },\r\n      capabilities: {\r\n        mining: 10\r\n      },\r\n      requireTechnologyIds: ['pe'],\r\n    },\r\n    \"5\": {\r\n      name: 'Conventional research facility',\r\n      mass: 5e8,\r\n      workers: 1000000,\r\n      bp: 2000,\r\n      minerals: {},\r\n      capabilities: {\r\n        research: 10\r\n      },\r\n      upgrade: [6],\r\n      requireTechnologyIds: [],\r\n    },\r\n    \"6\": {\r\n      name: 'PE research facility',\r\n      mass: 5e8,\r\n      workers: 1000000,\r\n      bp: 2400,\r\n      minerals: {\r\n        \"4\": 1200,\r\n        \"9\": 1200,\r\n      },\r\n      capabilities: {\r\n        research: 100\r\n      },\r\n      requireTechnologyIds: ['pe'],\r\n    },\r\n  },\r\n  researchAreas: {\r\n    \"1\": \"Biology\",\r\n    \"2\": \"Industrial\",\r\n    \"3\": \"Defensive systems\",\r\n    \"4\": \"Energy weapons\",\r\n    \"5\": \"Logistics\",\r\n    \"6\": \"Ground combat\",\r\n    \"7\": \"Missiles and kinetic weapons\",\r\n    \"8\": \"Power and propulsion\",\r\n    \"9\": \"Sensors and fire control\",\r\n  },\r\n  research: {\r\n    \"m1\": {\r\n      name: \"Mining rate 1\",\r\n      description: \"Increase mining production by 20%\",\r\n      cost: 100,\r\n      area: 2,\r\n      requireResearchIds: [],\r\n      unlockTechnologyIds: ['m1']\r\n    },\r\n    \"m2\": {\r\n      name: \"Mining rate 2\",\r\n      description: \"Increase mining production by 20%\",\r\n      cost: 100,\r\n      area: 2,\r\n      requireResearchIds: ['m1'],\r\n      unlockTechnologyIds: ['m2']\r\n    },\r\n    \"m3\": {\r\n      name: \"Mining rate 3\",\r\n      description: \"Increase mining production by 20%\",\r\n      cost: 100,\r\n      area: 2,\r\n      requireResearchIds: ['m2'],\r\n      unlockTechnologyIds: ['m3']\r\n    },\r\n    \"m4\": {\r\n      name: \"Mining rate 4\",\r\n      description: \"Increase mining production by 20%\",\r\n      cost: 100,\r\n      area: 2,\r\n      requireResearchIds: ['m3'],\r\n      unlockTechnologyIds: ['m4']\r\n    },\r\n    \"m5\": {\r\n      name: \"Mining rate 5\",\r\n      description: \"Increase mining production by 20%\",\r\n      cost: 100,\r\n      area: 2,\r\n      requireResearchIds: ['m4'],\r\n      unlockTechnologyIds: ['m5']\r\n    },\r\n    \"c1\": {\r\n      name: \"Construction rate 1\",\r\n      description: \"Increase construction rate by 20%\",\r\n      cost: 100,\r\n      area: 2,\r\n      requireResearchIds: [],\r\n      unlockTechnologyIds: ['c1']\r\n    },\r\n    \"c2\": {\r\n      name: \"Construction rate 2\",\r\n      description: \"Increase construction rate by 20%\",\r\n      cost: 100,\r\n      area: 2,\r\n      requireResearchIds: ['c1'],\r\n      unlockTechnologyIds: ['c2']\r\n    },\r\n    \"c3\": {\r\n      name: \"Construction rate 3\",\r\n      description: \"Increase construction rate by 20%\",\r\n      cost: 100,\r\n      area: 2,\r\n      requireResearchIds: ['c2'],\r\n      unlockTechnologyIds: ['c3']\r\n    },\r\n    \"c4\": {\r\n      name: \"Construction rate 4\",\r\n      description: \"Increase construction rate by 20%\",\r\n      cost: 100,\r\n      area: 2,\r\n      requireResearchIds: ['c3'],\r\n      unlockTechnologyIds: ['c4']\r\n    },\r\n    \"c5\": {\r\n      name: \"Construction rate 5\",\r\n      description: \"Increase construction rate by 20%\",\r\n      cost: 100,\r\n      area: 2,\r\n      requireResearchIds: ['c4'],\r\n      unlockTechnologyIds: ['c5']\r\n    },\r\n    \"r1\": {\r\n      name: \"Research rate 1\",\r\n      description: \"Increase research speed by 20%\",\r\n      cost: 100,\r\n      area: 2,\r\n      requireResearchIds: [],\r\n      unlockTechnologyIds: ['r1']\r\n    },\r\n    \"r2\": {\r\n      name: \"Research rate 2\",\r\n      description: \"Increase research speed by 20%\",\r\n      cost: 100,\r\n      area: 2,\r\n      requireResearchIds: ['r1'],\r\n      unlockTechnologyIds: ['r2']\r\n    },\r\n    \"r3\": {\r\n      name: \"Research rate 3\",\r\n      description: \"Increase research speed by 20%\",\r\n      cost: 100,\r\n      area: 2,\r\n      requireResearchIds: ['r2'],\r\n      unlockTechnologyIds: ['r3']\r\n    },\r\n    \"r4\": {\r\n      name: \"Research rate 4\",\r\n      description: \"Increase research speed by 20%\",\r\n      cost: 100,\r\n      area: 2,\r\n      requireResearchIds: ['r3'],\r\n      unlockTechnologyIds: ['r4']\r\n    },\r\n    \"r5\": {\r\n      name: \"Research rate 5\",\r\n      description: \"Increase research speed by 20%\",\r\n      cost: 100,\r\n      area: 2,\r\n      requireResearchIds: ['r4'],\r\n      unlockTechnologyIds: ['r5']\r\n    },\r\n    \"pe\": {\r\n      name: 'Post-Einstein technology',\r\n      description: \"Unlock the potential of Post-Einsteinium (PE) physics to create technology vastly superior to anything previously thought possible.\",\r\n      cost: 5000,\r\n      area: 2,\r\n      requireResearchIds: [],\r\n      unlockTechnologyIds: ['pe']\r\n    },\r\n    \"test1\": {\r\n      name: 'Test 1',\r\n      description: \"A test technology.\",\r\n      cost: 5000,\r\n      area: 2,\r\n      requireResearchIds: [],\r\n      unlockTechnologyIds: []\r\n    },\r\n    \"test2\": {\r\n      name: 'Test 2',\r\n      description: \"Another test technology.\",\r\n      cost: 5000,\r\n      area: 2,\r\n      requireResearchIds: [],\r\n      unlockTechnologyIds: []\r\n    },\r\n    \"e1\": {\r\n      name: \"PE Drive\",\r\n      description: \"Utilise PE physics to create a fundamentally new form of propulsion and gain access to the far reaches of our solar system\",\r\n      cost: 500,\r\n      area: 8,\r\n      requireResearchIds: ['pe'],\r\n      unlockTechnologyIds: ['e1', 'fe1']\r\n    }\r\n  },\r\n  technology: {\r\n    \"pe\": {\r\n      name: 'Post-Einstein technology'\r\n    },\r\n    \"e1\": {\r\n      name: 'PE Drive'\r\n    },\r\n    \"fe1\": {\r\n      name: 'Fuel efficiency 1'\r\n    },\r\n\r\n    \"m1\": {\r\n      name: \"Mining rate 1\",\r\n      modifyCapabilities: {\r\n        mining: 0.2,\r\n      },\r\n    },\r\n    \"m2\": {\r\n      name: \"Mining rate 2\",\r\n      modifyCapabilities: {\r\n        mining: 0.2,\r\n      },\r\n    },\r\n    \"m3\": {\r\n      name: \"Mining rate 3\",\r\n      modifyCapabilities: {\r\n        mining: 0.2,\r\n      },\r\n    },\r\n    \"m4\": {\r\n      name: \"Mining rate 4\",\r\n      modifyCapabilities: {\r\n        mining: 0.2,\r\n      },\r\n    },\r\n    \"m5\": {\r\n      name: \"Mining rate 5\",\r\n      modifyCapabilities: {\r\n        mining: 0.2,\r\n      },\r\n    },\r\n    \"c1\": {\r\n      name: \"Construction rate 1\",\r\n      modifyCapabilities: {\r\n        construction: 0.2,\r\n      },\r\n    },\r\n    \"c2\": {\r\n      name: \"Construction rate 2\",\r\n      modifyCapabilities: {\r\n        construction: 0.2,\r\n      },\r\n    },\r\n    \"c3\": {\r\n      name: \"Construction rate 3\",\r\n      modifyCapabilities: {\r\n        construction: 0.2,\r\n      },\r\n    },\r\n    \"c4\": {\r\n      name: \"Construction rate 4\",\r\n      modifyCapabilities: {\r\n        construction: 0.2,\r\n      },\r\n    },\r\n    \"c5\": {\r\n      name: \"Construction rate 5\",\r\n      modifyCapabilities: {\r\n        construction: 0.2,\r\n      },\r\n    },\r\n    \"r1\": {\r\n      name: \"Research rate 1\",\r\n      modifyCapabilities: {\r\n        research: 0.2,\r\n      },\r\n    },\r\n    \"r2\": {\r\n      name: \"Research rate 2\",\r\n      modifyCapabilities: {\r\n        research: 0.2,\r\n      },\r\n    },\r\n    \"r3\": {\r\n      name: \"Research rate 3\",\r\n      modifyCapabilities: {\r\n        research: 0.2,\r\n      },\r\n    },\r\n    \"r4\": {\r\n      name: \"Research rate 4\",\r\n      modifyCapabilities: {\r\n        research: 0.2,\r\n      },\r\n    },\r\n    \"r5\": {\r\n      name: \"Research rate 5\",\r\n      modifyCapabilities: {\r\n        research: 0.2,\r\n      },\r\n    },\r\n  }\r\n};\r\n\r\n\r\nexport default config;","import orbitPeriod from 'helpers/physics/orbit-period';\r\nimport map from 'helpers/object/map';\r\nimport defaultGameDefinition from '../data/defaultGameDefinition';\r\n\r\nexport default function createWorldFromDefinition(server, definition) {\r\n  //merge in the default game definition\r\n  definition = {...defaultGameDefinition, ...definition};\r\n\r\n  //Basic props\r\n  server.minerals = {...definition.minerals};\r\n  server.structures = JSON.parse(JSON.stringify(definition.structures));\r\n  server.researchAreas = {...definition.researchAreas};\r\n  server.research = JSON.parse(JSON.stringify(definition.research));\r\n  server.technology = JSON.parse(JSON.stringify(definition.technology));\r\n  server.systemBodyTypeMineralAbundance = JSON.parse(JSON.stringify(definition.systemBodyTypeMineralAbundance));\r\n\r\n  //internal lookup hashes\r\n  const systemsByDefinitionId = {};//[systemDefinitionId] = system entity\r\n  const speciesByDefinitionId = {};//[systemDefinitionId] = system entity\r\n  const systemBodiesBySystemDefinitionIdBySystemBodyDefinitionName = {};//[systemDefinitionId][systemBodyDefinitionName] = systemBody entity\r\n  const factionsByDefinitionName = {};\r\n\r\n  //create the systems\r\n  Object.keys(definition.systems).forEach(systemDefinitionId => {\r\n    const systemDefinition = definition.systems[systemDefinitionId];\r\n\r\n    //create system entity\r\n    const system = server._newEntity('system', {});\r\n\r\n    //update lookup hashes (used later)\r\n    systemsByDefinitionId[systemDefinitionId] = system;\r\n    systemBodiesBySystemDefinitionIdBySystemBodyDefinitionName[systemDefinitionId] = {};\r\n\r\n    const systemBodiesBySystemBodyDefinitionName = systemBodiesBySystemDefinitionIdBySystemBodyDefinitionName[systemDefinitionId];\r\n\r\n    //now create the bodies\r\n    const bodies = systemDefinition.bodies.map(bodyDefinition => {\r\n      const bodyMass = bodyDefinition.mass || 1;\r\n      const orbitingId = bodyDefinition.parent && systemBodiesBySystemBodyDefinitionName[bodyDefinition.parent] && (systemBodiesBySystemBodyDefinitionName[bodyDefinition.parent].id || null);\r\n\r\n      const body = server._newEntity('systemBody', {\r\n        systemId: system.id,\r\n        mass: {\r\n          value: bodyMass\r\n        },\r\n        movement: getMovementFromOrbitDefinition(bodyDefinition.orbit, bodyMass, orbitingId, orbitingId ? systemBodiesBySystemBodyDefinitionName[bodyDefinition.parent].mass.value : 0),\r\n        position: {x: 0, y: 0},\r\n        systemBody: {\r\n          type: bodyDefinition.type,\r\n          radius: bodyDefinition.radius,\r\n          day: bodyDefinition.day,\r\n          axialTilt: bodyDefinition.axialTilt,\r\n          tidalLock: !!bodyDefinition.tidalLock,\r\n          albedo: bodyDefinition.albedo || 0,\r\n          luminosity: bodyDefinition.luminosity || 0,\r\n          children: [],\r\n          position: null,\r\n        },\r\n        render: {type: 'systemBody'},\r\n        availableMinerals: generateAvailableMinerals(bodyDefinition, definition)\r\n      });\r\n\r\n      if(orbitingId) {\r\n        const orbitingEntity = server.entities[orbitingId];\r\n\r\n        orbitingEntity.systemBody.children.push(body.id);\r\n\r\n        body.systemBody.position = [...orbitingEntity.systemBody.position, orbitingEntity.systemBody.children.length];\r\n      } else {\r\n        body.systemBody.position = [];\r\n      }\r\n\r\n      //record in lookup hash (used later for factions)\r\n      if(systemBodiesBySystemBodyDefinitionName[bodyDefinition.name]) {\r\n        debugger;\r\n      }\r\n      systemBodiesBySystemBodyDefinitionName[bodyDefinition.name] = body;\r\n\r\n      return body;\r\n    });\r\n\r\n    //update system with body ids\r\n    system.systemBodyIds = bodies.map(body => body.id);\r\n  });\r\n\r\n  //Create the species\r\n  Object.keys(definition.species).forEach(id => {\r\n    const speciesDefinition = definition.species[id];\r\n\r\n    const entity = server._newEntity('species', {species: {...definition.baseSpecies, ...speciesDefinition}});\r\n\r\n    speciesByDefinitionId[id] = entity;\r\n  })\r\n\r\n  //create the factions\r\n  definition.factions.forEach(factionDefinition => {\r\n    const faction = server.createFaction(factionDefinition.name, factionDefinition.startingResearch);\r\n\r\n    factionsByDefinitionName[factionDefinition.name] = faction;\r\n\r\n    //assign initial research and technology\r\n    factionDefinition.startingResearch.forEach(researchId => {\r\n      const research = definition.research[researchId];\r\n\r\n      faction.faction.research[researchId] = true;//mark this technology as unlocked\r\n\r\n      //now mark technologies as unlocked\r\n      research.unlockTechnologyIds.forEach(technologyId => {\r\n        if(!definition.technology[technologyId]) {\r\n          throw new Error(`Unknown technology '${technologyId}'`);\r\n        }\r\n\r\n        faction.faction.technology[technologyId] = true;\r\n      })\r\n    })\r\n\r\n    const factionSystemBodyBySystemBodyId = {};\r\n\r\n    //Now link factions to systems\r\n    Object.keys(factionDefinition.startingSystems).forEach(systemDefinitionId => {\r\n      const systemDefinition = definition.systems[systemDefinitionId];\r\n      const factionStartingSystemDefinition = factionDefinition.startingSystems[systemDefinitionId];\r\n      const system = systemsByDefinitionId[systemDefinitionId];\r\n      const systemBodiesBySystemBodyDefinitionName = systemBodiesBySystemDefinitionIdBySystemBodyDefinitionName[systemDefinitionId];\r\n\r\n      if(!system) {\r\n        throw new Error(`Unknown system '${systemDefinitionId}' in startingSystems for faction '${factionDefinition.name}'`);\r\n      }\r\n\r\n      switch(factionStartingSystemDefinition.type) {\r\n        case 'known':\r\n          server._addFactionEntity(\r\n            faction.id, \r\n            system.id, \r\n            {\r\n              name: factionStartingSystemDefinition.name || systemDefinitionId\r\n            }\r\n          );\r\n\r\n          systemDefinition.bodies.forEach(bodyDefinition => {\r\n            const factionSystemBody = server._addFactionEntity(\r\n              faction.id, \r\n              systemBodiesBySystemBodyDefinitionName[bodyDefinition.name].id, \r\n              {\r\n                name: factionStartingSystemDefinition.bodyNamesMap?.[bodyDefinition.name] || bodyDefinition.name,\r\n                isSurveyed: false\r\n              }\r\n            );\r\n\r\n            factionSystemBodyBySystemBodyId[factionSystemBody.id] = factionSystemBody;\r\n          });\r\n\r\n          // //create faction system entity, and apply name\r\n          // const factionSystem = server._newEntity('factionSystem', {\r\n          //   systemId: system.id,\r\n          //   factionId: faction.id,\r\n          //   factionSystem: {\r\n          //     name: factionStartingSystemDefinition.name || systemDefinitionId//if faction has defined it's own name, use that\r\n          //   },\r\n\r\n          // });\r\n\r\n          // //Now repeat for the system bodies\r\n          // const factionSystemBodies = systemDefinition.bodies.map(bodyDefinition => {\r\n          //   const factionSystemBody = server._newEntity('factionSystemBody', {\r\n          //     render: {type: 'factionSystemBody'},\r\n          //     systemId: system.id,\r\n          //     factionId: faction.id,\r\n          //     systemBodyId: systemBodiesBySystemBodyDefinitionName[bodyDefinition.name].id,\r\n          //     factionSystemId: factionSystem.id,\r\n          //     factionSystemBody: {\r\n          //       name: factionStartingSystemDefinition.bodyNamesMap?.[bodyDefinition.name] || bodyDefinition.name,\r\n          //       isSurveyed: false,\r\n          //     }\r\n          //   });\r\n\r\n          //   factionSystemBodyBySystemBodyId[factionSystemBody.systemBodyId] = factionSystemBody;\r\n\r\n          //   return factionSystemBody;\r\n          // })\r\n\r\n          // //record ID's of factionSystemBodies in factionSystem\r\n          // factionSystem.factionSystemBodyIds = factionSystemBodies.map(entity => entity.id);\r\n\r\n          break;\r\n        default:\r\n          throw new Error('Unknown value for factionStartingSystemDefinition.type');\r\n      }\r\n    });\r\n\r\n    //now add starting colonies\r\n    factionDefinition.startingColonies.forEach(startingColonyDefinition => {\r\n      const systemBody = systemBodiesBySystemDefinitionIdBySystemBodyDefinitionName[startingColonyDefinition.system][startingColonyDefinition.body];\r\n\r\n      //Create the colony\r\n      const colony = server.createColony(systemBody.id, faction.id, map(definition.minerals, () => (0)));//, structures, populationIds.filter(id => (id !== null))\r\n\r\n      //Create the populations\r\n      startingColonyDefinition.populations.forEach(populationDefinition => {\r\n        let populationId = 0;\r\n\r\n        if(populationDefinition.species) {\r\n          const species = speciesByDefinitionId[populationDefinition.species];\r\n\r\n          const entity = server.createPopulation(faction.id, colony.id, species.id, populationDefinition.population);\r\n\r\n          populationId = entity.id;\r\n        }\r\n\r\n        if(populationDefinition.structures) {//assign structures to colony\r\n          server.addStructuresToColony(colony.id, populationId, {...populationDefinition.structures});\r\n        }\r\n      });\r\n\r\n\r\n      //mark system body as surveyed\r\n      if(startingColonyDefinition.isSurveyed) {\r\n        factionSystemBodyBySystemBodyId[systemBody.id].isSurveyed = true;\r\n      }\r\n    });\r\n  })\r\n}\r\n\r\nfunction generateAvailableMinerals(bodyDefinition, definition) {\r\n  if(bodyDefinition.type === 'star') {\r\n    return null;\r\n  }\r\n\r\n  const isStartingWorld = false;//TODO detect starting worlds\r\n\r\n  if(isStartingWorld) {\r\n    //TODO implement starting world minerals\r\n    return null;\r\n  } else {\r\n    return map(definition.minerals, (value, id) => {\r\n      //TODO do all this better..\r\n      const abundance = definition.systemBodyTypeMineralAbundance[bodyDefinition.type][id];\r\n\r\n      const quantity = Math.floor(Math.random() * abundance * Math.pow(bodyDefinition.mass, 1/5));\r\n      const access = Math.ceil(Math.random() * 10) / 10//TODO smaller bodies tend towards higher access\r\n\r\n      return quantity === 0 || access === 0 ?\r\n        {quantity: 0, access: 0}\r\n        :\r\n        {quantity, access};\r\n    });\r\n  }\r\n}\r\n\r\n\r\n\r\nfunction getMovementFromOrbitDefinition(definition, bodyMass, orbitingId, orbitingMass) {\r\n  if(!definition) {\r\n    return null;\r\n  }\r\n\r\n  if(definition.type === 'regular') {\r\n    return {\r\n      ...definition,\r\n      type: 'orbitRegular',\r\n      orbitingId,\r\n      period: orbitPeriod(definition.radius, bodyMass, orbitingMass)//orbitRadius, orbitingBodyMass, orbitedBodyMass\r\n    }\r\n  } else if(definition.type === 'elliptical') {\r\n    return {\r\n      ...definition,\r\n      type: 'orbitElliptical',\r\n      orbitingId,\r\n    }\r\n  }\r\n}","export default function movementFactory(lastTime, time) {\r\n  const updatedEntities = {};\r\n\r\n  function regularOrbitPositionAtTime(entity, entities) {\r\n    if(!entity.movement || !entity.movement.orbitingId) {\r\n      return;\r\n    }\r\n\r\n    const parent = entities[entity.movement.orbitingId];\r\n    const orbit = entity.movement;\r\n\r\n    const orbitRadius = orbit.radius;\r\n    const orbitalPeriod = orbit.period;\r\n    const orbitFraction = ((time + (orbitalPeriod * orbit.offset)) % orbitalPeriod)/orbitalPeriod;\r\n    const orbitAngle = orbitFraction * Math.PI * 2;\r\n    const position = entity.position;\r\n\r\n    let newPositionX = orbitRadius * Math.cos(orbitAngle);\r\n    let newPositionY = orbitRadius * Math.sin(orbitAngle);\r\n\r\n    if(parent) {\r\n      if(parent.movement) {\r\n        movement(parent, entities);\r\n      }\r\n\r\n      newPositionX += parent.position.x;\r\n      newPositionY += parent.position.y;\r\n    }\r\n\r\n    if(position.x !== newPositionX || position.y !== newPositionY) {\r\n      position.x = newPositionX;\r\n      position.y = newPositionY;\r\n      position.lastUpdateTime = time;\r\n\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  function movement(entity, entities) {\r\n    if(!entity.movement) {//ignore entities that do not have movement definitio\r\n      return;\r\n    }\r\n\r\n    const id = entity.id;\r\n\r\n    //If this entity has already been processed, return the result of that\r\n    if(id in updatedEntities) {\r\n      return updatedEntities[id];\r\n    }\r\n\r\n    let result = false;\r\n\r\n    switch(entity.movement.type) {\r\n      case 'orbitRegular':\r\n        result = regularOrbitPositionAtTime(entity, entities);\r\n        break;\r\n      default:\r\n        return;//TODO handle other orbit types\r\n    }\r\n\r\n    //record the result to prevent repeat processing\r\n    return updatedEntities[id] = result;\r\n  }\r\n\r\n  return movement;\r\n}\r\n","\r\n\r\nexport default function calculatePopulationWorkers(population, entities) {\r\n  const colony = entities[population.colonyId];\r\n\r\n  if(!colony || colony.type !== 'colony') {\r\n    population.population.supportWorkers = 0;\r\n    population.population.effectiveWorkers = 0;\r\n  } else {\r\n    const species = entities[population.speciesId];\r\n\r\n    population.population.supportWorkers = population.population.quantity * species.species.support;//TODO calculate based on environment;\r\n    population.population.effectiveWorkers = (population.population.quantity - population.population.supportWorkers) * species.species.workerMultiplier;\r\n  }\r\n}\r\n","\r\nimport calculatePopulationWorkers from './calculatePopulationWorkers';\r\nimport {DAY_ANNUAL_FRACTION} from 'game/Consts';\r\n\r\nexport default function calculatePopulationGrowth(init, population, colony, entities) {\r\n  const species = entities[population.speciesId];\r\n  //const systemBody = entities[colony.systemBodyId];\r\n  const dayGrowthRate = init ? 1 : Math.pow(species.species.growthRate, DAY_ANNUAL_FRACTION);\r\n\r\n  //TODO affected by environment\r\n  //TODO do not grow on colony ships, transports etc\r\n\r\n  //update population\r\n  population.population.quantity *= dayGrowthRate;\r\n\r\n  //update workers\r\n  calculatePopulationWorkers(population, entities);\r\n}\r\n","export const DAY_ANNUAL_FRACTION = 1/365.25\r\n","import forEach from 'helpers/object/forEach';\r\n\r\nimport calculateLabourEfficiency from './calculateLabourEfficiency';\r\n\r\nexport default function calculatePopulationProductionCapabilites(colony, populationId, technologyModifiers, structureDefinitions, entities, capabilityProductionTotals, structuresWithCapability) {\r\n  const populationStructures = colony.colony.structures[populationId];\r\n  const populationProductionCapabilites = {\r\n    structuresWithCapability: {},\r\n    capabilityProductionTotals: {},\r\n    unitCapabilityProduction: {}\r\n  };\r\n\r\n  if(populationStructures) {\r\n    //let population = null;\r\n    let species = null;\r\n    let labourEfficiency = 0;\r\n    let totalRequiredWorkforce = 0;\r\n\r\n    //find total required workforce\r\n    forEach(populationStructures, (quantity, structureId) => {\r\n      const structureDefinition = structureDefinitions[structureId];\r\n\r\n      if(!structureDefinition) {\r\n        throw new Error(`Unknown structure: '${structureId}'`);\r\n      }\r\n\r\n      //TODO disabled structures, industries, etc\r\n\r\n      //record required workforce\r\n      totalRequiredWorkforce += structureDefinition.workers * quantity;\r\n    });\r\n\r\n    //calculate labour efficiency\r\n    if(populationId !== 0) {\r\n      const population = entities[populationId];\r\n      species = entities[population.speciesId];\r\n\r\n      if(population.colonyId !== colony.id) {\r\n        throw new Error('population not in colony');\r\n      }\r\n\r\n      labourEfficiency = calculateLabourEfficiency(colony, species, population.population.effectiveWorkers, totalRequiredWorkforce, entities);\r\n    }\r\n\r\n\r\n    forEach(populationStructures, (quantity, structureId) => {\r\n      const structureDefinition = structureDefinitions[structureId];\r\n\r\n      //TODO disabled structures, industries, etc\r\n\r\n      //for every type of thing (capability) this structure can do (e.g. mining, reseach, etc)...\r\n      forEach(structureDefinition.capabilities, (value, capability) => {\r\n        const speciesModifier = species?.species[capability] || 1;\r\n        const technologyModifier = technologyModifiers[capability] || 1;\r\n\r\n        //...boilerplate to create objects to store the values in...\r\n        if(!(capability in capabilityProductionTotals)) {\r\n          capabilityProductionTotals[capability] = 0;\r\n          structuresWithCapability[capability] = {};\r\n        }\r\n\r\n        //...calculate how much this set of structures will produce...\r\n        const productionPerUnit = value * technologyModifier * (structureDefinition.workers > 0 ? labourEfficiency * speciesModifier : 1);\r\n        const totalProduction = productionPerUnit * quantity;\r\n\r\n        //...record the total for the colony of this action (e.g. total amount of mining we can perform, etc)...\r\n        capabilityProductionTotals[capability] += totalProduction;\r\n\r\n        //...AND record the quantities of structures that can perform this action (e.g. mining can be performed by 3 basic mines, 14 PE mines)\r\n        structuresWithCapability[capability][structureId] = quantity;\r\n\r\n\r\n        //...now do the same just for this population....\r\n        if(!(capability in populationProductionCapabilites.structuresWithCapability)) {\r\n          populationProductionCapabilites.capabilityProductionTotals[capability] = 0;\r\n          populationProductionCapabilites.structuresWithCapability[capability] = {};\r\n          populationProductionCapabilites.unitCapabilityProduction[capability] = {};\r\n        }\r\n\r\n        populationProductionCapabilites.capabilityProductionTotals[capability] += totalProduction;\r\n        populationProductionCapabilites.structuresWithCapability[capability][structureId] = quantity;\r\n        populationProductionCapabilites.unitCapabilityProduction[capability][structureId] = productionPerUnit;\r\n      });\r\n    });//end foreach structure type\r\n  }\r\n\r\n  return populationProductionCapabilites;\r\n}\r\n","\r\n\r\nexport default function calculateLabourEfficiency(colony, species, totalEffectiveWorkers, totalRequiredWorkforce, entities) {\r\n  return Math.min(1, Math.floor(totalEffectiveWorkers) / totalRequiredWorkforce); //TODO add environment, happiness and any other modifiers here\r\n}\r\n","import forEach from 'helpers/object/forEach';\r\n\r\nimport calculatePopulationGrowth from 'game/server/entityProcessorFactories/colony/calculatePopulationGrowth';\r\nimport calculatePopulationProductionCapabilites from 'game/server/entityProcessorFactories/colony/calculatePopulationProductionCapabilites';\r\nimport calculateTechnologyModifiers from 'game/server/entityProcessorFactories/colony/calculateTechnologyModifiers';\r\n\r\nconst DAY_ANNUAL_FRACTION = 1/365.25\r\n\r\nexport default function colonyFactory(lastTime, time, init) {\r\n  const lastDay = Math.floor(lastTime / 86400);\r\n  const today = Math.floor(time / 86400);\r\n\r\n  //only update once a day\r\n  if(lastDay !== today || init) {\r\n    return function colony(colony, entities, factionEntities, gameConfig) {\r\n      if(colony.type === 'colony') {\r\n        let i, l, totalPopulation = 0, totalEffectiveWorkers = 0, totalSupportWorkers = 0;\r\n\r\n        const faction = entities[colony.factionId];\r\n        const technologyModifiers = calculateTechnologyModifiers(faction.faction.technology)\r\n        const systemBody = entities[colony.systemBodyId];\r\n        const factionSystemBody = factionEntities[colony.factionId][colony.systemBodyId];\r\n        const additionalModifiedEntityIDs = [];\r\n\r\n        const structureDefinitions = gameConfig.structures;\r\n        const capabilityProductionTotals = {};//the total procution this colony is capable of for each capability (mining, research, etc)\r\n        const structuresWithCapability = {};//total structures for each capability [capability][structureId] = number of structures\r\n\r\n        colony.colony.populationCapabilityProductionTotals = {};\r\n        colony.colony.populationStructuresWithCapability = {};\r\n\r\n        //for each population, calculate population growth, total number of workers and production output\r\n        for(i = 0, l = colony.populationIds.length; i < l; ++i) {\r\n          let population = entities[colony.populationIds[i]];\r\n\r\n          calculatePopulationGrowth(init, population, colony, entities);\r\n\r\n          //keep track of totals\r\n          totalPopulation += population.population.quantity;\r\n          totalEffectiveWorkers += population.population.effectiveWorkers;\r\n          totalSupportWorkers += population.population.supportWorkers;\r\n\r\n          let populationProductionTotals = calculatePopulationProductionCapabilites(colony, population.id, technologyModifiers, structureDefinitions, entities, capabilityProductionTotals, structuresWithCapability);\r\n\r\n          //record population production values\r\n          colony.colony.populationCapabilityProductionTotals[population.id] = populationProductionTotals.capabilityProductionTotals;\r\n          colony.colony.populationStructuresWithCapability[population.id] = populationProductionTotals.structuresWithCapability;\r\n          colony.colony.populationUnitCapabilityProduction[population.id] = populationProductionTotals.unitCapabilityProduction;\r\n        }\r\n\r\n        //calculate production for structures that do not have a population (e.g. automated miners)\r\n        const automatedProductionTotals = calculatePopulationProductionCapabilites(colony, 0, technologyModifiers, structureDefinitions, entities, capabilityProductionTotals, structuresWithCapability);\r\n\r\n        //record automated production values\r\n        colony.colony.populationCapabilityProductionTotals[0] = automatedProductionTotals.capabilityProductionTotals;\r\n        colony.colony.populationStructuresWithCapability[0] = automatedProductionTotals.structuresWithCapability;\r\n        colony.colony.populationUnitCapabilityProduction[0] = automatedProductionTotals.unitCapabilityProduction;\r\n\r\n        //record total workforce\r\n        colony.colony.totalPopulation = Math.floor(totalPopulation);\r\n        colony.colony.totalEffectiveWorkers = Math.floor(totalEffectiveWorkers);\r\n        colony.colony.totalSupportWorkers = Math.floor(totalSupportWorkers);\r\n\r\n        //record total production\r\n        colony.colony.capabilityProductionTotals = capabilityProductionTotals;\r\n        colony.colony.structuresWithCapability = structuresWithCapability;\r\n\r\n        //mining\r\n        if(capabilityProductionTotals.mining && factionSystemBody.isSurveyed) {\r\n          //can mine\r\n          //-how much you can mine per year\r\n          const miningProduction = capabilityProductionTotals.mining;//calculateProduction('mining', capabilityProductionTotals.mining, technologyModifiers.miningMod, gameConfig);//totalStructureCapabilities.mining * labourEfficiency * technologyModifiers.miningMod * 1;//TODO include species mining rate here + any other adjustments (morale etc)\r\n\r\n          forEach(gameConfig.minerals, (mineralName, mineralId) => {\r\n            const systemBodyMinerals = systemBody.availableMinerals[mineralId];\r\n            let dailyProduction = miningProduction * systemBodyMinerals.access * DAY_ANNUAL_FRACTION;\r\n\r\n            if(dailyProduction > systemBodyMinerals.quantity) {\r\n              dailyProduction = systemBodyMinerals.quantity\r\n            }\r\n\r\n            colony.colony.minerals[mineralId] = colony.colony.minerals[mineralId] + dailyProduction;\r\n\r\n            systemBody.availableMinerals[mineralId].quantity -= dailyProduction;\r\n\r\n            additionalModifiedEntityIDs.push(systemBody.id);\r\n          })\r\n        }\r\n\r\n        //Research\r\n        if(capabilityProductionTotals.research) {\r\n\r\n        }\r\n        //const researchProduction = capabilityProductionTotals.research;\r\n\r\n\r\n        return additionalModifiedEntityIDs;\r\n      }\r\n\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return null\r\n}\r\n","import forEach from 'helpers/object/forEach';\r\n\r\nexport default function getTechnologyModifiers(technologies) {\r\n  const modifiers = {};\r\n\r\n  forEach(technologies, technology => {\r\n    if(technology.modifyCapabilities) {\r\n      forEach(technology.modifyCapabilities, (modifier, capability) => {\r\n        if(!(capability in modifiers)) {\r\n          modifiers[capability] = 1;\r\n        }\r\n\r\n        modifiers[capability] += modifier;\r\n      });\r\n    }\r\n  });\r\n\r\n  return modifiers;\r\n}\r\n","import { isObject } from 'lodash';\r\n\r\nimport map from 'helpers/object/map';\r\nimport forEach from 'helpers/object/forEach';\r\nimport isEmpty from 'helpers/object/isEmpty';\r\n\r\nimport createWorldFromDefinition from './createWorldFromDefinition';\r\n//import * as entityCacheTypes from './entityCacheTypes';\r\nimport * as FactionClientTypes from '../FactionClientTypes';\r\n\r\nimport movementFactory from './entityProcessorFactories/movement';\r\n//import populationFactory from './entityProcessorFactories/population';\r\nimport colonyFactory from './entityProcessorFactories/colony';\r\n\r\nimport calculatePopulationWorkers from 'game/server/entityProcessorFactories/colony/calculatePopulationWorkers';\r\n\r\n\r\n//Server phases\r\nconst INITIALISING = 'initialising';\r\nconst CONNECTING = 'connecting';\r\nconst RUNNING = 'running';\r\n\r\nconst global = typeof(window) === 'object' ? window : {};\r\n\r\n\r\nexport default class Server {\r\n  connector = null;\r\n\r\n  phase = INITIALISING;\r\n\r\n  gameTime = null;\r\n  totalElapsedTime = null;\r\n  targetTickRate = 60;\r\n  timeMultiplier = 60;//3 * 24 * 3600;//time multiplier\r\n  gameSecondsPerStep = 1;//60;//game seconds to process per step - higher = less processing, but risks resolution based issues\r\n  isPaused = false;\r\n\r\n  factions;//e.g. The in-game factions Humans, martians (factions are also entities)\r\n  clients;//a client is a player connected to a faction by a connector method with a permissions e.g. Bob spectating Martians on clientId 1\r\n  minerals;\r\n  structures;\r\n  research;\r\n  researchAreas;\r\n  technology;\r\n  systemBodyTypeMineralAbundance;\r\n\r\n  gameConfig;\r\n\r\n  entities = null;\r\n  entityId = null;//used to keep track of assigned entity IDs - increments after each entity is created\r\n  entityIds = null;\r\n  entitiesLastUpdated = null;\r\n\r\n  factionEntities = null;\r\n  factionEntitiesLastUpdated = null;\r\n\r\n  entityProcessorFactories = [movementFactory, colonyFactory];\r\n\r\n  clientLastUpdatedTime = null\r\n\r\n  constructor(connector) {\r\n    this.connector = connector;\r\n  }\r\n\r\n  //////////////////////\r\n  // message handlers //\r\n  //////////////////////\r\n\r\n  //-initialising server\r\n  message_createWorld(definition, clientId) {\r\n    if(this.phase !== INITIALISING) {\r\n      throw new Error('Can only create world while Server is in \"initialising\" phase');\r\n    }\r\n\r\n    //c/onsole.log('[Server] createWorld: ', definition, clientId);\r\n    this.totalElapsedTime = this.gameTime = Math.floor(new Date(definition.startDate).valueOf() / 1000);\r\n\r\n    //initialise the world based on supplied definition\r\n    this.factions = {};\r\n    this.clients = {};\r\n    this.entityId = 1;\r\n    this.entities = {};\r\n    this.entityIds = [];\r\n    this.clientLastUpdatedTime = {};\r\n    this.entitiesLastUpdated = {};\r\n    this.factionEntities = {};\r\n    this.factionEntitiesLastUpdated = {};\r\n    createWorldFromDefinition(this, definition);\r\n\r\n    this.gameConfig = {\r\n      minerals: this.minerals,\r\n      structures: this.structures,\r\n      researchAreas: this.researchAreas,\r\n      research: this.research,\r\n      technology: this.technology,\r\n    };\r\n\r\n    //c/onsole.log('[Server] created world: ', this.entities);\r\n\r\n    this._advanceTime(null);\r\n\r\n    //Now waiting for players to connect\r\n    this.phase = CONNECTING;\r\n\r\n    //broadcast to players that state has updated\r\n    this.connector.broadcastToClients('phaseChanged', this.phase);\r\n\r\n    //Report back to clients that game is ready\r\n    return Promise.resolve();\r\n  }\r\n\r\n  message_connectClient({name}, clientId) {\r\n    if(this.phase !== CONNECTING) {\r\n      throw new Error('Can only connect player while Server is in \"connecting\" phase');\r\n    }\r\n\r\n    if(this.clients[clientId]) {\r\n      throw new Error('Each client can only connect once');\r\n    }\r\n\r\n    //check client name is valid\r\n    this._checkValidClientName(name, clientId);\r\n\r\n    //c/onsole.log('[Server] connectClient: ', name, clientId);\r\n\r\n    //create a client\r\n    //factions are the available factions (id: role hash), factionId is the actual faction they are connected as right now\r\n    this.clients[clientId] = {name, id: clientId, type: 'human', ready: false, factions: {}, factionId: null, gameTime: this.gameTime, gameSpeed: 1, isPaused: true};\r\n\r\n    //Broadcast updated clients info\r\n    this.connector.broadcastToClients('clientConnected', this.clients);\r\n\r\n    //return game details to newly connected client\r\n    return Promise.resolve({\r\n      //entities: this.entities,\r\n      factions: this.factions,\r\n      clients: this.clients,\r\n      minerals: this.minerals,\r\n      structures: this.structures,\r\n      research: this.research,\r\n      researchAreas: this.researchAreas,\r\n      technology: this.technology,\r\n    })\r\n  }\r\n\r\n  message_setClientSettings({name, factions, factionId, ready}, clientId) {\r\n    if(this.phase !== CONNECTING) {\r\n      throw new Error('Can only set connected player settings while Server is in \"connecting\" phase');\r\n    }\r\n\r\n    this._checkValidClient(clientId);\r\n    this._checkValidClientName(name, clientId);\r\n\r\n    //TODO check that name is unique\r\n\r\n    const client = this.clients[clientId];\r\n\r\n\r\n    //TODO check that client settings are valid e.g. is connecting to valid faction(s) not already controlled by someone else\r\n    if(factions === null || isEmpty(factions)) {\r\n      //joining as spectator\r\n      factions = map(this.factions, (faction) => (FactionClientTypes.SPECTATOR));\r\n    } else {\r\n      if(Object.keys(factions).some(factionId => {\r\n        return this._getClientsForFaction(factionId, [FactionClientTypes.OWNER]).some(thisClientId => (thisClientId !== clientId));\r\n      })) {\r\n        throw new Error(`Invalid client settings, faction(s) already owned by '${factionId}'`);\r\n      }\r\n\r\n      if(!this.factions[factionId]) {\r\n        throw new Error(`Invalid client settings, unknown factionId '${factionId}'`);\r\n      }\r\n\r\n      if(!factions[factionId]) {\r\n        throw new Error(`Invalid client settings, invalid factionId '${factionId}' (must be a faction you have permission for)`);\r\n      }\r\n    }\r\n\r\n    //c/onsole.log('[Server] setClientSettings: ', name, factions, factionId, ready, clientId);\r\n\r\n    ready = !!ready;\r\n\r\n    //update state\r\n    this.clients[clientId] = {...client, name, factions, factionId, ready};\r\n\r\n    //broadcast updated state to all players\r\n    this.connector.broadcastToClients('clientUpdated', this.clients);\r\n\r\n    //new settings applied successfully\r\n    return Promise.resolve(true);\r\n  }\r\n\r\n  message_startGame(data, clientId) {\r\n    if(this.phase !== CONNECTING) {\r\n      throw new Error('Can only start game while Server is in \"connecting\" phase');\r\n    }\r\n\r\n    this._checkValidClient(clientId);\r\n\r\n    //c/onsole.log('[Server] startGame');\r\n    this.phase = RUNNING;\r\n\r\n    //Only only start game if all players are ready\r\n    if(Object.values(this.clients).every(client => (client.ready))) {\r\n      //For each client, tell them the game is starting and send them their client state\r\n      Object.values(this.clients).forEach(client => {\r\n        this.connector.sendMessageToClient(client.id, 'startingGame', this._getClientState(client.id, true));\r\n      });\r\n\r\n      this._lastTime = Date.now();\r\n\r\n      const targetIntervalMs = 1000/this.targetTickRate;//ms\r\n      const targetInterval = targetIntervalMs/1000;\r\n\r\n      const onInterval = () => {\r\n        if(this.phase !== RUNNING) {\r\n          this._tickId = null;\r\n        } else {\r\n          const start = Date.now();\r\n          this._onTick(targetInterval);\r\n          const end = Date.now();\r\n\r\n          //try and keep the tick rate stable\r\n          this._tickId = setTimeout(\r\n            onInterval,\r\n\r\n            Math.max(0, (this._lastTime + targetIntervalMs) - end)\r\n          )\r\n\r\n          this._lastTime = start;\r\n        }\r\n      };\r\n\r\n      this._tickId = setTimeout(onInterval, targetIntervalMs);\r\n\r\n      return Promise.resolve(true);\r\n    }\r\n\r\n    return Promise.resolve(false);\r\n  }\r\n\r\n  //-in game\r\n  message_getClientState(lastUpdateTime, clientId) {\r\n    if(this.phase !== RUNNING) {\r\n      throw new Error('Can only get client state while server is in \"running\" phase');\r\n    }\r\n\r\n    this._checkValidClient(clientId);\r\n\r\n    return Promise.resolve(this._getClientState(clientId, true))\r\n  }\r\n\r\n  message_setDesiredSpeed(newDesiredSpeed, clientId) {\r\n    if(this.phase !== RUNNING) {\r\n      throw new Error('Can only set desired speed while server is in \"running\" phase');\r\n    }\r\n\r\n    this._checkValidClient(clientId);\r\n\r\n    this.clients[clientId].gameSpeed = Math.max(1, Math.min(5, newDesiredSpeed|0))\r\n  }\r\n\r\n  message_setIsPaused(newIsPaused, clientId) {\r\n    if(this.phase !== RUNNING) {\r\n      throw new Error('Can only set is paused while server is in \"running\" phase');\r\n    }\r\n\r\n    this._checkValidClient(clientId);\r\n\r\n    this.clients[clientId].isPaused = !!newIsPaused;\r\n  }\r\n\r\n  message_createColony(systemBodyId, clientId) {\r\n    if(this.phase !== RUNNING) {\r\n      throw new Error('Can only create colony while server is in \"running\" phase');\r\n    }\r\n\r\n    this._checkValidClient(clientId);\r\n\r\n    const colony = this.createColony(systemBodyId, this.clients[clientId].factionId);\r\n\r\n    return Promise.resolve(colony.id);\r\n  }\r\n\r\n  message_createResearchGroup(colonyId, structures, projects, clientId) {\r\n    if(this.phase !== RUNNING) {\r\n      throw new Error('Can only add research group while server is in \"running\" phase');\r\n    }\r\n\r\n    this._checkValidClient(clientId);\r\n\r\n    const factionId = this.clients[clientId].factionId;\r\n    const colony = this.getEntityById(colonyId);\r\n\r\n    if(!colony || colony.factionId !== factionId) {\r\n      throw new Error('Cannot add researchGroup, invalid colony');\r\n    }\r\n\r\n    const researchGroup = this.createResearchGroup(colonyId, structures || {}, projects || []);\r\n\r\n    return Promise.resolve(researchGroup.id);\r\n  }\r\n\r\n  message_removeResearchGroup(researchGroupId, clientId) {\r\n    if(this.phase !== RUNNING) {\r\n      throw new Error('Can only remove research group while server is in \"running\" phase');\r\n    }\r\n\r\n    this._checkValidClient(clientId);\r\n\r\n    //this.clients[clientId].factionId;\r\n\r\n    //TODO\r\n  }\r\n\r\n  message_updateResearchGroup(researchGroupId, structures, projects, clientId) {\r\n    if(this.phase !== RUNNING) {\r\n      throw new Error('Can only remove research group while server is in \"running\" phase');\r\n    }\r\n\r\n    this._checkValidClient(clientId);\r\n\r\n    //this.clients[clientId].factionId;\r\n\r\n    //TODO\r\n  }\r\n\r\n\r\n  //-validation methods\r\n  _checkValidClientName(name, clientId) {\r\n    if(!name) {\r\n      throw new Error('Client required a name');\r\n    }\r\n\r\n    Object.values(this.clients).forEach(client => {\r\n      if(client.id !== clientId && client.name === name) {\r\n        throw new Error('Client name already in use by another client');\r\n      }\r\n    });\r\n  }\r\n\r\n  _checkValidClient(clientId) {\r\n    if(!this.clients[clientId]) {\r\n      throw new Error('Unknown client');\r\n    }\r\n  }\r\n\r\n\r\n  /////////////////////\r\n  // Getters/setters //\r\n  /////////////////////\r\n\r\n\r\n\r\n  ////////////////////\r\n  // public methods //\r\n  ////////////////////\r\n\r\n  onMessage(type, data, clientId) {\r\n    const name = `message_${type}`;\r\n\r\n    if(this[name]) {\r\n      return this[name](data, clientId);\r\n    }\r\n\r\n    console.log('Unknown message from client: ', type, data, clientId);\r\n  }\r\n\r\n  getEntityById(id, type = null) {\r\n    const entity = this.entities[id] || null;\r\n\r\n    if(entity && type && entity.type !== type) {\r\n      return null;\r\n    }\r\n\r\n    return entity\r\n  }\r\n\r\n  getEntitiesByIds(ids) {\r\n    const entities = this.entities;\r\n\r\n    return ids.map(id => (entities[id]));\r\n  }\r\n\r\n  createFaction(name) {\r\n    const faction = this._newEntity('faction', {faction: {\r\n      name,\r\n      colonyIds: [],\r\n      research: {},\r\n      technology: {}\r\n    }});\r\n\r\n    this.factionEntities[faction.id] = {};\r\n    this.factionEntitiesLastUpdated[faction.id] = {};\r\n\r\n    //record factions separately (in addition to being an entity)\r\n    this.factions[faction.id] = faction;\r\n\r\n    return faction;\r\n  }\r\n\r\n  createColony(systemBodyId, factionId, minerals = {}, structures = {}, populationIds = []) {\r\n    const systemBody = this.entities[systemBodyId];\r\n    const faction = this.entities[factionId];\r\n\r\n    const colony = this._newEntity('colony', {\r\n      factionId,\r\n      systemId: systemBody.systemId,\r\n      systemBodyId: systemBody.id,\r\n      researchGroupIds: [],//groups performing research\r\n      populationIds,\r\n      colony: {\r\n        structures,\r\n        minerals,\r\n        researchInProgress: {},//progress on research projects on this colony\r\n\r\n        buildQueue: [],\r\n        capabilityProductionTotals: {},\r\n        structuresWithCapability: {},\r\n        populationCapabilityProductionTotals: {},\r\n        populationStructuresWithCapability: {},\r\n        populationUnitCapabilityProduction: {},\r\n      }\r\n    });\r\n\r\n    //update faction\r\n    faction.faction.colonyIds.push(colony.id);\r\n    this.entitiesLastUpdated[factionId] = this.gameTime;//mark faction as updated\r\n\r\n    return colony;\r\n  }\r\n\r\n  createResearchGroup(colonyId, structures, projects) {\r\n    const colony = this.getEntityById(colonyId, 'colony');\r\n\r\n    if(!colony) {\r\n      throw new Error('cannot create research group, invalid colonyId');\r\n    }\r\n\r\n    const researchGroup = this._newEntity('researchGroup', {\r\n      factionId: colony.factionId,\r\n      colonyId: colony.id,\r\n\r\n\r\n      researchGroup: {\r\n        structures,//describes what this group would like to use - what they get depends on what is available - groups are assigned structures based on order\r\n        projects//array of research projects IDs, to be performed in order\r\n      }\r\n    });\r\n\r\n    return researchGroup;\r\n  }\r\n\r\n  createPopulation(factionId, colonyId, speciesId, quantity) {\r\n    const colony = this.getEntityById(colonyId, 'colony');\r\n\r\n\r\n    const entity = this._newEntity('population', {\r\n      factionId,\r\n      speciesId,\r\n      colonyId: colony ? colony.id : null,\r\n\r\n      population: {\r\n        quantity,\r\n\r\n        supportWorkers: 0,\r\n        effectiveWorkers: 0,\r\n      }\r\n    });\r\n\r\n    //Init worker counts\r\n    calculatePopulationWorkers(entity, this.entities);\r\n\r\n    // if(colony) {\r\n    //   this.addPopulationToColony(colony.id, entity.id);\r\n    // }\r\n\r\n    return entity;\r\n  }\r\n\r\n  addPopulationToColony(colonyId, populationId) {\r\n    const colony = this.getEntityById(colonyId, 'colony');\r\n    const population = this.getEntityById(populationId, 'population');\r\n\r\n    if(!colony || !population) {\r\n      debugger;//shouldn't happen\r\n\r\n      return;\r\n    }\r\n\r\n    colony.populationIds.push(population.id);\r\n\r\n    population.colonyId = colony.id;\r\n\r\n    //mark as updated\r\n    colony.colony.lastUpdateTime = this.gameTime;\r\n\r\n    this.entitiesLastUpdated[colonyId] = this.gameTime;//mark faction as updated\r\n    this.entitiesLastUpdated[populationId] = this.gameTime;//mark faction as updated\r\n  }\r\n\r\n  addStructuresToColony(colonyId, populationId, structures) {\r\n    const colony = this.getEntityById(colonyId, 'colony');\r\n\r\n    if(!colony) {\r\n      return\r\n    }\r\n\r\n    populationId = populationId || 0;\r\n\r\n    if(!colony.colony.structures[populationId]) {\r\n      colony.colony.structures[populationId] = {}\r\n    }\r\n\r\n    colony.colony.lastUpdateTime = this.gameTime;\r\n\r\n    const currentStructures = colony.colony.structures[populationId];\r\n\r\n    forEach(structures, (quantity, structureId) => {\r\n      if(currentStructures[structureId]) {\r\n        currentStructures[structureId] += quantity;\r\n      } else {\r\n        currentStructures[structureId] = quantity;\r\n      }\r\n\r\n      //prevent negative quantities\r\n      currentStructures[structureId] = Math.max(0, currentStructures[structureId]);\r\n    });\r\n\r\n    this.entitiesLastUpdated[colonyId] = this.gameTime;//mark as updated\r\n  }\r\n\r\n\r\n  /////////////////////////////\r\n  // Internal helper methods //\r\n  /////////////////////////////\r\n\r\n  _updateGameTime() {\r\n    let newGameSpeed = 5;\r\n    let isPaused = false;\r\n\r\n    Object.values(this.clients).forEach(client => {\r\n      newGameSpeed = Math.min(newGameSpeed, client.gameSpeed);\r\n      isPaused = isPaused || client.isPaused;\r\n    });\r\n\r\n    switch(newGameSpeed) {\r\n      case 1:\r\n        this.timeMultiplier = 1;\r\n        this.gameSecondsPerStep = 1;\r\n        break;\r\n      case 2:\r\n        this.timeMultiplier = 60;\r\n        this.gameSecondsPerStep = 1;\r\n        break;\r\n      case 3:\r\n        this.timeMultiplier = 3600;\r\n        this.gameSecondsPerStep = 1;\r\n        break;\r\n      case 4:\r\n        this.timeMultiplier = 86400;\r\n        this.gameSecondsPerStep = 60;\r\n        break;\r\n      case 5:\r\n        this.timeMultiplier = 7 * 86400;\r\n        this.gameSecondsPerStep = 360;\r\n        break;\r\n      default:\r\n        throw new Error('Unknown speed value');\r\n    }\r\n\r\n    this.gameSpeed = newGameSpeed;\r\n    this.isPaused = isPaused;\r\n  }\r\n\r\n  _onTick = (elapsedTime) => {\r\n    this._updateGameTime();\r\n\r\n    if(!this.isPaused) {\r\n      const effectiveElapsedTime = elapsedTime * this.timeMultiplier;\r\n\r\n      this.totalElapsedTime += effectiveElapsedTime;\r\n\r\n      this._advanceTime(this.gameSecondsPerStep);\r\n    }\r\n\r\n    Object.values(this.clients).forEach(client => {\r\n      this.connector.sendMessageToClient(client.id, 'updatingGame', this._getClientState(client.id));\r\n    });\r\n  }\r\n\r\n  _advanceTime(step = 1) {\r\n    const entities = this.entities;\r\n\r\n    const entityIds = this.entityIds;\r\n    const entitiesLastUpdated = this.entitiesLastUpdated;\r\n    const numEntities = entityIds.length;\r\n    let processors = null;\r\n\r\n    if(step === null) {\r\n      //initial entity initialisation\r\n      processors = this._getEntityProcessors(this.gameTime, this.gameTime, true);\r\n\r\n      for(let j = 0; j < numEntities; ++j) {\r\n        processors(entities[entityIds[j]], entities, this.factionEntities);\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    const advanceToTime = Math.floor(this.totalElapsedTime);\r\n\r\n    while(this.gameTime < advanceToTime) {\r\n      let lastGameTime = this.gameTime;\r\n\r\n      //update game time\r\n      this.gameTime = Math.min(this.gameTime + step, advanceToTime);\r\n\r\n      const gameTime = this.gameTime;\r\n\r\n      let processors = this._getEntityProcessors(lastGameTime, gameTime);\r\n      let result;\r\n\r\n      //for each entity\r\n      for(let i = 0; i < numEntities; ++i) {\r\n        let entityId = entityIds[i];\r\n        result = processors(entities[entityId], entities, this.factionEntities);\r\n\r\n        if(result) {\r\n          //this entity was mutated\r\n          entitiesLastUpdated[entityId] = gameTime;\r\n\r\n          if(result instanceof Array) {\r\n            result.forEach(id => {\r\n              entitiesLastUpdated[id] = gameTime;\r\n            });\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  _getEntityProcessors(lastGameTime, gameTime, init = false) {\r\n\r\n    //create entity processors\r\n    const entityProcessors = this.entityProcessorFactories.map(factory => (factory(lastGameTime, gameTime, init))).filter(processor => (!!processor));\r\n\r\n    //create composed function for processing all entities\r\n    //called for each entity - any processor the mutates the entity must return true\r\n    return (entity, entities, factionEntities) => {\r\n      let entityWasMutated = false;\r\n\r\n      for(let i = 0, l = entityProcessors.length; i < l;++i) {\r\n        entityWasMutated = entityProcessors[i](entity, entities, factionEntities, this.gameConfig) || entityWasMutated;\r\n      }\r\n\r\n      return entityWasMutated;\r\n    }\r\n  }\r\n\r\n  _getClientState(clientId, full = false) {\r\n    const gameTime = this.gameTime;\r\n    const entities = this.entities;\r\n    const entitiesLastUpdated = this.entitiesLastUpdated;\r\n    const client = this.clients[clientId];\r\n    const factionId = client.factionId;\r\n\r\n    const factionEntities = this.factionEntities[factionId];\r\n    const factionEntitiesLastUpdated = this.factionEntitiesLastUpdated[factionId];\r\n\r\n    const entityIds = this.entityIds;\r\n    const clientLastUpdated = this.clientLastUpdatedTime[clientId];\r\n\r\n    //if no clientLastUpdatedTime, then get full state\r\n    full = full || !clientLastUpdated;\r\n\r\n    //entities & faction entities to be sent\r\n    const clientEntities = {};\r\n    const clientFactionEntities = {};\r\n\r\n    for(let i = 0, l = entityIds.length; i < l; ++i) {\r\n      let entityId = entityIds[i];\r\n      let entity = entities[entityId];\r\n\r\n      if(full || (entitiesLastUpdated[entityId] > clientLastUpdated)) {\r\n        //Filter to just entities that do not have a factionId AND entities that have the clients faction id\r\n        if(!entity.factionId || entity.factionId === factionId) {\r\n\r\n          if(full) {\r\n            clientEntities[entityId] = entity;\r\n          } else {\r\n            //just changed facets\r\n            const updatedFacets = getUpdatedFacets(entity, clientLastUpdated);\r\n\r\n            if(updatedFacets) {\r\n              clientEntities[entityId] = updatedFacets;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if(factionEntities[entityId]) {\r\n        if(full || (factionEntitiesLastUpdated[entityId] > clientLastUpdated)) {\r\n          clientFactionEntities[entityId] = factionEntities[entityId];\r\n        }\r\n      }\r\n    }\r\n\r\n    //record last updated time\r\n    this.clientLastUpdatedTime[clientId] = gameTime;\r\n\r\n    //output state to client\r\n    return {\r\n      entities: clientEntities, \r\n      factionEntities: clientFactionEntities,\r\n      gameTime, gameSpeed: this.gameSpeed, desiredGameSpeed: client.gameSpeed, isPaused: this.isPaused, factionId: client.factionId};\r\n  }\r\n\r\n  _newEntity(type, props) {\r\n    const newEntity = {\r\n      ...props,\r\n      id: this.entityId++,\r\n      type,\r\n    };\r\n\r\n    this.entities[newEntity.id] = newEntity;\r\n    this.entityIds.push(newEntity.id);\r\n    this.entitiesLastUpdated[newEntity.id] = this.gameTime;\r\n\r\n    //automatically add ref to this entity in linked entities\r\n    //-props to check for links\r\n    const idProps = ['factionId', 'speciesId', 'systemBodyId', 'systemId', 'speciesId', 'colonyId'];\r\n    const skipProps = ['id', 'type'];\r\n\r\n    const facets = [];\r\n\r\n    const keys = Object.keys(props);\r\n\r\n    for(let i = 0; i < keys.length; i++) {\r\n      const prop = keys[i];\r\n\r\n      if(prop.endsWith('Id')) {\r\n        if(idProps.includes(prop)) {\r\n          const linkedEntityId = props[prop];\r\n          const linkedEntity = this.entities[linkedEntityId];\r\n\r\n          if(linkedEntity) {\r\n            const linkedIdsProp = type+'Ids';\r\n\r\n            //if cross reference doesn't exist, add it\r\n            if(!linkedEntity[linkedIdsProp]) {\r\n              linkedEntity[linkedIdsProp] = [];\r\n            }\r\n\r\n            //record ref to this entity...\r\n            linkedEntity[linkedIdsProp].push(newEntity.id);\r\n            //...and update last updated time\r\n            this.entitiesLastUpdated[linkedEntity.id] = this.gameTime;\r\n          }\r\n        }\r\n      } else if(prop.endsWith('Ids')) {\r\n        //hmm.. I don't think I need to do anythin\r\n      } else if(newEntity[prop] && !skipProps.includes(prop) && isObject(newEntity[prop])) {\r\n        //is a facet - record last update time\r\n        newEntity[prop].lastUpdateTime = this.gameTime;\r\n        facets.push(prop);\r\n      }\r\n    }\r\n\r\n    newEntity.facets = facets;\r\n\r\n    return newEntity;\r\n  }\r\n\r\n  _addFactionEntity(factionId, entityId, props) {\r\n    //record that this factionEntity needs to be supplied to the client for this faction\r\n    this.factionEntitiesLastUpdated[factionId][entityId] = this.gameTime;\r\n\r\n    return this.factionEntities[factionId][entityId] = {\r\n      intel: {},//what we believe about what other factions know about this entity\r\n      id: entityId,\r\n\r\n      ...props\r\n    };\r\n  }\r\n\r\n  _removeEntity(entity) {\r\n    const entityId = typeof(entity) === 'object' ? entity.id : entity;\r\n\r\n    if(this.entities[entityId]) {\r\n      this.entityIds.splice(this.entityIds.indexOf(entityId), 1);\r\n\r\n      //remove factionEntity(s)\r\n      Object.keys(this.factions).forEach(factionId => {\r\n        if(this.factionEntities[factionId][entityId]) {\r\n          delete this.factionEntities[factionId][entityId];\r\n        }\r\n      });\r\n\r\n      //TODO record and report that entity (and factionEntity) no longer exists to clients\r\n\r\n      delete this.entities[entityId];\r\n    }\r\n  }\r\n\r\n  _getClientsForFaction(factionId, roles = null) {\r\n    return Object.values(this.clients).reduce((output, client) => {\r\n      if(client.factions[factionId]) {\r\n        if(!roles || roles.includes(client.factions[factionId])) {\r\n          output.push(client.id);\r\n        }\r\n      }\r\n\r\n      return output;\r\n    }, [])\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nfunction getUpdatedFacets(entity, clientLastUpdated) {\r\n  let output = null;\r\n\r\n  entity.facets.forEach(facetName => {\r\n    const facet = entity[facetName];\r\n\r\n    if(facet && facet.lastUpdateTime > clientLastUpdated) {\r\n      output = output || {};\r\n\r\n      output[facetName] = facet;\r\n    }\r\n  })\r\n\r\n  return output;\r\n}","export default function isObjectEmpty(obj) {\r\n  for(var prop in obj) {\r\n    if(obj.hasOwnProperty(prop)) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n}\r\n","export const OWNER = 1;\r\nexport const SPECTATOR = 2;\r\n","//This is the worker-side part of the worker\r\nimport Server from './Server'\r\n\r\n\r\nexport default class WorkerServer {\r\n\r\n    constructor() {\r\n        this.server = new Server(this);\r\n    }\r\n\r\n\r\n    //Server comms methods\r\n    broadcastToClients(type, data) {\r\n        //c/onsole.log('[LC] broadcastToClients: ', messageType, data);\r\n        global.postMessage({type, data});\r\n    }\r\n\r\n    sendMessageToClient(connectionId, type, data, messageId = null) {\r\n        if(!connectionId === 1) {//This connector only supports a single player\r\n            throw new Error('Invalid connectionId');\r\n        }\r\n        \r\n        const binaryData = toBinary(data);\r\n\r\n        binaryData instanceof ArrayBuffer ? \r\n            global.postMessage({type, data: binaryData, messageId}, [binaryData])\r\n            :\r\n            global.postMessage({type, data: binaryData, messageId});\r\n    }\r\n\r\n    //Recieving messages\r\n    onmessage = ({data: {type, data, clientId, messageId}}) => {\r\n        const response = this.server.onMessage(type, data, clientId) || Promise.resolve();\r\n\r\n        response.then((result) => {\r\n            this.sendMessageToClient(1, 'reply', result, messageId);\r\n        })\r\n    }\r\n}\r\n\r\nconst enc = new TextEncoder();\r\n\r\nfunction toBinary(data) {\r\n    if(data && data !== true && data !== false && !(data instanceof ArrayBuffer)) {\r\n        const encData = enc.encode(JSON.stringify(data));\r\n\r\n        return encData.buffer;\r\n    }\r\n\r\n    return data;\r\n}","import WorkerServer from './WorkerServer';\r\n\r\nconst workerServer = new WorkerServer();\r\n\r\nglobal.onmessage = workerServer.onmessage;\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// the startup function\n__webpack_require__.x = function() {\n\t// Load entry module and return exports\n\t// This entry module depends on other loaded chunks and execution need to be delayed\n\tvar __webpack_exports__ = __webpack_require__.O(undefined, [878], function() { return __webpack_require__(8024); })\n\t__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n\treturn __webpack_exports__;\n};\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"static/js/\" + chunkId + \".\" + \"51137940\" + \".chunk.js\";\n};","// This function allow to reference async chunks and sibling chunks for the entrypoint\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"./\";","// no baseURI\n\n// object to store loaded chunks\n// \"1\" means \"already loaded\"\nvar installedChunks = {\n\t24: 1\n};\n\n// importScripts chunk loading\nvar installChunk = function(data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\tfor(var moduleId in moreModules) {\n\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t}\n\t}\n\tif(runtime) runtime(__webpack_require__);\n\twhile(chunkIds.length)\n\t\tinstalledChunks[chunkIds.pop()] = 1;\n\tparentChunkLoadingFunction(data);\n};\n__webpack_require__.f.i = function(chunkId, promises) {\n\t// \"1\" is the signal for \"already loaded\"\n\tif(!installedChunks[chunkId]) {\n\t\tif(true) { // all chunks have JS\n\t\t\timportScripts(__webpack_require__.p + __webpack_require__.u(chunkId));\n\t\t}\n\t}\n};\n\nvar chunkLoadingGlobal = self[\"webpackChunkreact4xgame2\"] = self[\"webpackChunkreact4xgame2\"] || [];\nvar parentChunkLoadingFunction = chunkLoadingGlobal.push.bind(chunkLoadingGlobal);\nchunkLoadingGlobal.push = installChunk;\n\n// no HMR\n\n// no HMR manifest","var next = __webpack_require__.x;\n__webpack_require__.x = function() {\n\treturn __webpack_require__.e(878).then(next);\n};","// run startup\nvar __webpack_exports__ = __webpack_require__.x();\n"],"names":["mapObject","obj","mapFunc","output","i","k","Object","keys","l","length","key","value","forEachObject","forEachFunc","orbitPeriod","orbitRadius","orbitingBodyMass","orbitedBodyMass","isNaN","Error","a","b","Math","PI","sqrt","equations","baseSpecies","growthRate","production","research","mining","support","workerMultiplier","crewMultiplier","minerals","startingWorldMinerals","quantity","access","systemBodyTypeMineralAbundance","structures","name","mass","workers","bp","capabilities","construction","upgrade","requireTechnologyIds","researchAreas","description","cost","area","requireResearchIds","unlockTechnologyIds","technology","modifyCapabilities","generateAvailableMinerals","bodyDefinition","definition","type","map","id","abundance","floor","random","pow","ceil","getMovementFromOrbitDefinition","bodyMass","orbitingId","orbitingMass","period","radius","movementFactory","lastTime","time","updatedEntities","movement","entity","entities","result","parent","orbit","orbitalPeriod","orbitAngle","offset","position","newPositionX","cos","newPositionY","sin","x","y","lastUpdateTime","regularOrbitPositionAtTime","calculatePopulationWorkers","population","colony","colonyId","species","speciesId","supportWorkers","effectiveWorkers","calculatePopulationGrowth","init","dayGrowthRate","calculatePopulationProductionCapabilites","populationId","technologyModifiers","structureDefinitions","capabilityProductionTotals","structuresWithCapability","populationStructures","populationProductionCapabilites","unitCapabilityProduction","labourEfficiency","totalRequiredWorkforce","forEach","structureId","structureDefinition","totalEffectiveWorkers","min","calculateLabourEfficiency","capability","speciesModifier","technologyModifier","productionPerUnit","totalProduction","colonyFactory","factionEntities","gameConfig","totalPopulation","totalSupportWorkers","technologies","modifiers","modifier","calculateTechnologyModifiers","factionId","faction","systemBody","systemBodyId","factionSystemBody","additionalModifiedEntityIDs","populationCapabilityProductionTotals","populationStructuresWithCapability","populationIds","populationProductionTotals","populationUnitCapabilityProduction","automatedProductionTotals","isSurveyed","miningProduction","mineralName","mineralId","systemBodyMinerals","availableMinerals","dailyProduction","push","INITIALISING","CONNECTING","RUNNING","Server","window","connector","phase","gameTime","totalElapsedTime","targetTickRate","timeMultiplier","gameSecondsPerStep","isPaused","entityId","entityIds","entitiesLastUpdated","factionEntitiesLastUpdated","entityProcessorFactories","clientLastUpdatedTime","_onTick","elapsedTime","_updateGameTime","effectiveElapsedTime","_advanceTime","values","clients","client","sendMessageToClient","_getClientState","this","clientId","Date","startDate","valueOf","factions","server","defaultGameDefinition","JSON","parse","stringify","systemsByDefinitionId","speciesByDefinitionId","systemBodiesBySystemDefinitionIdBySystemBodyDefinitionName","factionsByDefinitionName","systems","systemDefinitionId","systemDefinition","system","_newEntity","systemBodiesBySystemBodyDefinitionName","bodies","body","systemId","day","axialTilt","tidalLock","albedo","luminosity","children","render","orbitingEntity","systemBodyIds","speciesDefinition","factionDefinition","createFaction","startingResearch","researchId","technologyId","factionSystemBodyBySystemBodyId","startingSystems","factionStartingSystemDefinition","_addFactionEntity","bodyNamesMap","startingColonies","startingColonyDefinition","createColony","populations","populationDefinition","createPopulation","addStructuresToColony","createWorldFromDefinition","broadcastToClients","Promise","resolve","_checkValidClientName","ready","gameSpeed","_checkValidClient","prop","hasOwnProperty","isEmpty","some","_getClientsForFaction","thisClientId","data","every","_lastTime","now","targetIntervalMs","targetInterval","_tickId","setTimeout","onInterval","start","end","max","newDesiredSpeed","newIsPaused","projects","getEntityById","researchGroup","createResearchGroup","researchGroupId","console","log","ids","colonyIds","researchGroupIds","researchInProgress","buildQueue","currentStructures","newGameSpeed","step","numEntities","processors","advanceToTime","lastGameTime","_getEntityProcessors","Array","j","entityProcessors","factory","filter","processor","entityWasMutated","full","clientLastUpdated","clientEntities","clientFactionEntities","updatedFacets","getUpdatedFacets","desiredGameSpeed","props","newEntity","idProps","skipProps","facets","endsWith","includes","linkedEntityId","linkedEntity","linkedIdsProp","isObject","intel","splice","indexOf","roles","reduce","facetName","facet","WorkerServer","onmessage","messageId","onMessage","then","global","postMessage","connectionId","binaryData","toBinary","ArrayBuffer","enc","TextEncoder","encode","buffer","workerServer","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","loaded","__webpack_modules__","call","m","__webpack_exports__","O","deferred","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","r","d","o","defineProperty","enumerable","get","f","e","chunkId","all","promises","u","miniCssF","g","globalThis","Function","prototype","nmd","paths","p","installedChunks","importScripts","chunkLoadingGlobal","self","parentChunkLoadingFunction","bind","moreModules","runtime","pop","next"],"sourceRoot":""}